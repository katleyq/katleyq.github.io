[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "Geospatial analysis of Thomas Fire Burn Area (2017)\n\n\n\n\n\n\nKat Le\n\n\nDec 4, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Kat Le",
    "section": "",
    "text": "Kat Le is a Master of Environmental Data Science student, who is interested in applying advanced technology to solving environmental problems and teaching others how to do the same. As an undergraduate at the University of California Santa Barbara, they expanded their knowledge of environmental systems through obtaining a bachelor’s degree in Biological Sciences. Their curiosity and appetite for learning led them to participate in multiple research projects, where they got to deepen their understanding of the biological, chemical, and physical drivers of kelp forest ecosystems. After college, they served as the lead lab technician for a Department of Energy research project studying the potential of giant kelp as a biofuel. Through their many years of research experience, they found their passion for learning new technology to analyze environmental data. As a data fellow for the Environmental Data Initiative, they moved to a remote biological field station in Pennsylvania, where they designed and built workflows for managing the station’s sensor data.\nIn addition to being a student now, they have been working as a staff member at Bren, where they have been strengthening their technical knowledge by working in research and education information technology. They have been excited to help students and researchers utilize and troubleshoot technology for their coursework and research projects. Promoting equal access to education is central to Kat’s mission, and they hope to use their technical skill-set and knowledge about environmental systems to foster an inclusive learning space for the newest generation of environmental scientists."
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "Kat Le",
    "section": "Education",
    "text": "Education\nBS Biological Sciences, University of California, Santa Barbara (2019)\nMaster of Environmental Data Science"
  },
  {
    "objectID": "blog/2024-12-04-thomas-fire-geospatial-analysis/index.html",
    "href": "blog/2024-12-04-thomas-fire-geospatial-analysis/index.html",
    "title": "Geospatial analysis of Thomas Fire Burn Area (2017)",
    "section": "",
    "text": "Thomas Fire at Faria Beach\nPhoto Credit: Ray Ford, Noozhawk"
  },
  {
    "objectID": "blog/2024-12-04-thomas-fire-geospatial-analysis/index.html#part-1---time-series-analysis-of-air-quality-index-aqi-of-thomas-fire-burn-area",
    "href": "blog/2024-12-04-thomas-fire-geospatial-analysis/index.html#part-1---time-series-analysis-of-air-quality-index-aqi-of-thomas-fire-burn-area",
    "title": "Geospatial analysis of Thomas Fire Burn Area (2017)",
    "section": "Part 1 - Time Series Analysis of Air Quality Index (AQI) of Thomas Fire Burn Area",
    "text": "Part 1 - Time Series Analysis of Air Quality Index (AQI) of Thomas Fire Burn Area\nNext, we will analyze AQI in Santa Barbra over time. We’ll download AQI data from 2017 through 2018 from the EPA website using a URL.\n\nLoad Data\n\n\nCode\n# Read in data\naqi_17 = pd.read_csv('data/daily_aqi_by_county_2017.csv')\naqi_18 = pd.read_csv('data/daily_aqi_by_county_2018.csv')\n\n\n\n\nData Cleaning and Visualizing\nThe next step is to combine the data and do some cleaning so it is easier to work with for readibility and reproducibility purposes. As part of the cleaning process, we’ll want to make the column names uniform by making all letter lowercase and replacing spaces with underscores. We’ll then filter the full dataset for Santa Barbara county and make sure the date column is in the right data type, which is a pandas datetime object.\n\n\nCode\n# Combine aqi_17 and aqi_18 observations\naqi = pd.concat([aqi_17, aqi_18])\n\n# Simplify column names\naqi.columns = (aqi.columns\n                  .str.lower()\n                  .str.replace(' ','_'))\n               \n# Locate observations where county_name == Santa Barbara then store it as a copy in aqi_sb\naqi_sb = aqi.loc[aqi.county_name=='Santa Barbara'].copy()\n               \n               \n# Convert date column of aqi_sb to datetime type\naqi_sb.date = pd.to_datetime(aqi_sb.date)\n               \n# Set the data column as the index then reassign it back to aqi_sb\naqi_sb = aqi_sb.set_index('date')\n\n\nAfter our data is cleaned up, we’ll want to take a rolling 5-day average of AQI. This is because we have daily AQI measurements in our dataset, and it would be harder to see any patterns in the data if we plot the daily AQI. The rolling 5-day average allows us to smooth the data out and produce a clearer plot.\n\n\nCode\n# Calculate AQI rolling average over 5 day window\nrolling_average = aqi_sb.aqi.rolling(window = 5).mean()\n               \n# Create new column in aqi_sb called five_day_average and attach rolling_average series\naqi_sb['five_day_average'] = rolling_average\n\n\n\n\nPlotting\nFinally, we’ll want to plot the data to see how AQI changes before and after the Thomas Fire. For reference, we’ll add a red dotted line on the plot signifying when the Thomas Fire occurred.\n\n\nCode\n# Create line plot for AQI levels over time for Santa Barbara (2017-2018)\nplot = (aqi_sb.plot(kind='line', y='five_day_average', label = \"5-Day average\"))\n\n# Set title, xlabel, and ylabel for plot\nplot.set_title(\"Average AQI in Santa Barbara County (2017-2018)\", fontweight = 'bold')\nplot.set_xlabel(\"Date\")\nplot.set_ylabel(\"Average AQI (over 5-day window)\")\n\n# Add a vertical line on December 4, 2017 which was beginning of Thomas Fire\nplt.axvline(x=pd.to_datetime(\"2017-12-04\"), color='red', linestyle='--', label = \"Thomas Fire\")\nplt.legend()\n\n# Adjust the layout to prevent overlap\nplt.subplots_adjust(bottom=0.2)  # Increase bottom margin\n\n# Add figure description\nplt.figtext(0.5, 0, \"Figure 1: A line plot of 5-day rolling average of air quality index for Santa Barbara County from 2017-2018.\", wrap=True, horizontalalignment='center', fontsize=10)\n\n\nText(0.5, 0, 'Figure 1: A line plot of 5-day rolling average of air quality index for Santa Barbara County from 2017-2018.')\n\n\n\n\n\n\n\n\n\nThe plot above shows a 5-day rolling average of air quality index in Santa Barbara County from January 2017 to December 2018. We can clearly see a signficant spike in AQI right after the Thomas Fire started."
  },
  {
    "objectID": "blog/2024-12-04-thomas-fire-geospatial-analysis/index.html#part-2---using-landsat-data-to-visualize-thomas-fire-burn-area-by-creating-false-color-image",
    "href": "blog/2024-12-04-thomas-fire-geospatial-analysis/index.html#part-2---using-landsat-data-to-visualize-thomas-fire-burn-area-by-creating-false-color-image",
    "title": "Geospatial analysis of Thomas Fire Burn Area (2017)",
    "section": "Part 2 - Using landsat data to visualize Thomas Fire burn area by creating false color image",
    "text": "Part 2 - Using landsat data to visualize Thomas Fire burn area by creating false color image\nIn this section, we’ll create false color image of Santa Barbara county following the Thomas Fire to visualize the burn scar using landsat data. We’ll plot shortwave infrared in the red channel, near infrared in the green channel, and red in the blue channel. This technique is used in remote sensing to visualize moisture content and vegetation of each pixel. This combination of spectral bands uncovers the burn scar due to wildfire, which we’ll see in the Figure 2.\n\nLoad data\nWe’ll first load the thomas fire perimeter we retrieved from CALFIRE’s fire perimeter dataset. To see how we obtained the shapefile, check out the thomas-fire-perimeter.ipynb notebook in the notebooks folder of this github repository.\nThen we’ll load the netCDF file containing landsat data using rioxarray.\n\n\nCode\n# Load California Fire Perimeter shapefile\nthomas_fire = gpd.read_file(\"data/thomas_fire.shp\")\n\n# Load landsat data\nlandsat = rioxr.open_rasterio(\"data/landsat8-2018-01-26-sb-simplified.nc\")\n\n\nSince the landsat data has 3 dimensions and 1 of the dimensions is redudant, we’ll want want to drop the redudant dimension. We can do this by squeezing the data into 2 dimensions, then dropping the ‘band’ variable. The purpose of this step is to make the landsat data easier to work with and plot.\n\n\nCode\n# Convert data to 2 dimensions then drop the band variable\nlandsat = landsat.squeeze().drop_vars('band')\n\n\n\nImportant :\nWhen working with 2 spatial datasets, we always need to ensure the coordinate reference systems (CRS) of our spatial data match. Let’s check if the CRS of the landsat and thomas fire perimeter match.\n\n\nCode\n# Print out CRS of landsat and thomas_fire CRSs\nprint(f\"**Landsat CRS** = {landsat.rio.crs}\")\nprint('----')\nprint(f\"**Thomas Fire CRS** = {thomas_fire.crs}\")\n\n\n**Landsat CRS** = EPSG:32611\n----\n**Thomas Fire CRS** = EPSG:3857\n\n\nTurns out, they do not match. This is important to address right away!\n\n\nCode\n# Convert thomas_fire CRS to match landsat CRS\nthomas_fire = thomas_fire.to_crs(landsat.rio.crs)\n\n\nOkay good.. now they match. For good measure, it’s good practice to incorporate a test in our code that notifies us if there’s an issue with our data. Here, we’ll construct an assert statement that ensures the CRS of our 2 spatial datasets match.\n\n\nCode\n# Verify that landsat CRS is the same as thomas_fire crs before moving onto next code\nassert landsat.rio.crs == thomas_fire.crs\n\n\nNext, we’ll want to explore the height and width of the landsat data.\n\n\nCode\n# Print the height and width of the landsat data \nprint('Height: ', landsat.rio.height)\nprint('Width: ', landsat.rio.width)\n\n\nHeight:  731\nWidth:  870\n\n\nUsing this height and width, we’ll create the aspect ratio. This step will be important later on when we want to plot. The aspect ratio will help avoid any distortion in the data when plotting.\n\n\nCode\n# Calculate aspect ratio for plotting landsat data\nlandsat_aspect_ratio = landsat.rio.width / landsat.rio.height\n\n\n\n\n\nPlotting\nFinally, it’s time to plot our landsat data! As mentioned previously, we’ll plot the false color image by plotting a combination of shortwave infrared, near infrared, and red bands in order to uncover moisture content and vegetation of each pixel. This combination uncovers the Thomas Fire burn scar that you cannot see when you plot the true color image (red, green, and blue bands). For a clearer data visualization, we’ll overlay the border of the Thomas Fire polygon on top of the landsat data. We’ll color it in yellow to distinguish it from the rest of the plot.\n\n\nCode\n# Initialize a new plot with correct aspect ratio\nfig, ax = plt.subplots(figsize = (8, 6*landsat_aspect_ratio))\n\n# Remove axes\nax.axis('off')\n\n# Overlay thomas_fire polygon\nthomas_fire.plot(ax = ax,\n                 color = 'none',\n                edgecolor = 'yellow', \n                linewidth = 1)\n\n# Plot shortwave infrared, near infrared, and red bands of landsat data to RGB channels respectively\nlandsat[['swir22', 'nir08', 'red']].to_array().plot.imshow(ax = ax, \n                                                           robust = True)\n# Add title\nax.set_title('False Color Image of Santa Barbara County During 2017 Thomas Fire', fontweight = 'bold')\n\n# Create scalebar\nscalebar = ScaleBar(1,  # Scale in units per pixel\n                    units='m',  # Set units to meters\n                    location='lower right', \n                    scale_loc='bottom')  \n\n# Add scalebar created above to plot\nax.add_artist(scalebar)\n\n# Create legend for Thomas Fire Boundary\nax.legend(handles = [mpatches.Patch(color='yellow',\n                          label='Thomas Fire Boundary')], \n          loc = \"lower left\",\n          labelcolor = \"white\", \n          frameon=False)\n\n# Add a north arrow\nax.annotate('N', xy=(0.95, 0.95), xytext=(0.95, 0.9),\n            arrowprops=dict(facecolor='white', width=1, headwidth=8),\n            ha='center', va='center', fontsize=9, color='white',\n            xycoords='axes fraction')\n\n# Add figure description\nplt.figtext(0.5, 0, \"Figure 2: This is false color image of Santa Barbra County After 2017 Thomas Fire. Short-wave infrared, near-infrared, and red bands are assigned to the red, green and blue channels, respectively. This specific configuration of spectral bands displays moisture content levels and vegetation health of an area.\", wrap=True, horizontalalignment='center', fontsize=10)\n\n\nplt.show()"
  },
  {
    "objectID": "blog/2024-12-04-thomas-fire-geospatial-analysis/index.html#part-3-landcover-statistics",
    "href": "blog/2024-12-04-thomas-fire-geospatial-analysis/index.html#part-3-landcover-statistics",
    "title": "Geospatial analysis of Thomas Fire Burn Area (2017)",
    "section": "Part 3: Landcover statistics",
    "text": "Part 3: Landcover statistics\n(still figuring this part out)"
  }
]