{
  "hash": "92ae707d2582b085b9a985bf708697b2",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Geospatial analysis of Thomas Fire Burn Area\nauthor: Kat Le\ndate: 'December 4, 2024'\nimage: \"Thomas-Fire-Faria-Beach.jpg\"\nformat:\n  html:\n    code-fold: true\n    embed-resources: true\npython: /Users/katle/opt/anaconda3/bin/python\njupyter: \n  kernelspec: \n    name: eds220-env\n    display_name: \"Python 3 (eds220-env)\"\n    language: python\n---\n\n\n![Thomas Fire at Faria Beach](Thomas-Fire-Faria-Beach.jpg)\n\nPhoto Credit: [Ray Ford, Noozhawk](https://news.ucsb.edu/2023/021283/thomas-fire-research-reveals-ash-can-fertilize-oceans)\n\n### About\n\nIn December 2017, the Thomas Fire burned through 281,000 acres of land spread through both Santa Barbara and Ventura counties. According to the California Department of Forestry and Fire Protection, the Thomas Fire destroyed 1,063 residential & commercial structures and injured 2 fire personnel. The impacts of the fire were not only devasting for humans, but also for the surrounding environment. The Thomas Fire devasted wildlife, displaced many ecological communities, and caused poor quality for an extended period of time.\n\nThe **motivation** for this post is to demonstrate how to use geospatial analysis in Python to analyze the environmental impacts of the Thomas Fire. We'll first analyze air quality data in Santa Barbara county from the months leading up to the fire and following the fire. Then, we'll use satellite imagery of multispectral bands to try to visualize the burn scar. Finally, we'll use land use and land cover data to identify the types of ecosystems that were affected by the fire.\n\n### Github Repository\n\nThe full analysis is located in this Github repository: <https://github.com/katleyq/thomas-fire-final>\n\n### Highlights\n\nIn this analysis of the Thomas Fire, we'll accomplish the following:\n\n-   Time series analysis and visualization of air quality index (AQI) of affected burn area\n\n-   Raster analysis of landsat data to visualize burn areas using false color image\n\n-   Analysis of landcover statistics to visualize ecosystems affected by fire\n\n### Data\n\nThis repository utilizes the following datasets:\n\n1)  **Air Quality Index (AQI)**: This data was retrieved from the [US Environmental Protection Agency](https://www.epa.gov). It contains air quality data throughout the US, and we subset this dataset for Santa Barbara County.\n\n2)  **Thomas Fire Perimeter Data**: This data was retrieved from US governement's data catalogue. It contains spatial data regarding fire perimeters and associated metadata. We subset this data for the 2017 Thomas Fire. (Original Source: [California Fire Perimeter Data](https://catalog.data.gov/dataset/california-fire-perimeters-all-b3436))\n\n3)  **Landsat Data**: This data was retrieved from the Microsoft Planetary Computer Data Catalogue, pre-processed by Dr. Carmen Galaz-Garcia, and stored on the MEDS computational server. This data contains multispectral data for the area of interest. (Original Source: [Microsoft Planetary Computer Data Catalogue](https://planetarycomputer.microsoft.com/dataset/landsat-c2-l2))\n\n### Import libraries\n\nThe first step of our analysis is to import all relevant libraries. We'll use the following libraries throughout this analysis:\n\n::: {#c227da99 .cell tags='[]' execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd # Dataframe manipulation\nimport matplotlib.pyplot as plt # Plotting\nimport os # To construct file paths\nimport xarray as xr # To work with arrays\nimport rioxarray as rioxr # To work with netCDFs\nimport geopandas as gpd # To maniplate spatial data frames\nfrom shapely.geometry import box  # To create polygon bounding box\nfrom matplotlib_scalebar.scalebar import ScaleBar # for map scalebar\nimport matplotlib.patches as mpatches # for map legend\nfrom matplotlib.offsetbox import AnchoredText # for map compass\n```\n:::\n\n\n## **Part 1** - Time Series Analysis of Air Quality Index (AQI) of Thomas Fire Burn Area\n\nNext, we will analyze AQI in Santa Barbra over time. We'll download AQI data from 2017 through 2018 from the EPA website using a URL.\n\n### Load Data\n\n::: {#60762419 .cell tags='[]' execution_count=2}\n``` {.python .cell-code}\n# Read in data\naqi_17 = pd.read_csv('data/daily_aqi_by_county_2017.csv')\naqi_18 = pd.read_csv('data/daily_aqi_by_county_2018.csv')\n```\n:::\n\n\n### Data Cleaning and Visualizing\n\nThe next step is to combine the data and do some cleaning so it is easier to work with for readibility and reproducibility purposes. As part of the cleaning process, we'll want to make the column names uniform by making all letter lowercase and replacing spaces with underscores. We'll then filter the full dataset for Santa Barbara county and make sure the date column is in the right data type, which is a pandas `datetime` object.\n\n::: {#d2e61b83 .cell tags='[]' execution_count=3}\n``` {.python .cell-code}\n# Combine aqi_17 and aqi_18 observations\naqi = pd.concat([aqi_17, aqi_18])\n\n# Simplify column names\naqi.columns = (aqi.columns\n                  .str.lower()\n                  .str.replace(' ','_'))\n               \n# Locate observations where county_name == Santa Barbara then store it as a copy in aqi_sb\naqi_sb = aqi.loc[aqi.county_name=='Santa Barbara'].copy()\n               \n               \n# Convert date column of aqi_sb to datetime type\naqi_sb.date = pd.to_datetime(aqi_sb.date)\n               \n# Set the data column as the index then reassign it back to aqi_sb\naqi_sb = aqi_sb.set_index('date')\n```\n:::\n\n\nAfter our data is cleaned up, we'll want to take a rolling 5-day average of AQI. This is because we have daily AQI measurements in our dataset, and it would be harder to see any patterns in the data if we plot the daily AQI. The rolling 5-day average allows us to smooth the data out and produce a clearer plot.\n\n::: {#e41d27ba .cell tags='[]' execution_count=4}\n``` {.python .cell-code}\n# Calculate AQI rolling average over 5 day window\nrolling_average = aqi_sb.aqi.rolling(window = 5).mean()\n               \n# Create new column in aqi_sb called five_day_average and attach rolling_average series\naqi_sb['five_day_average'] = rolling_average\n\n```\n:::\n\n\n### Plotting\n\nFinally, we'll want to plot the data to see how AQI changes before and after the Thomas Fire. For reference, we'll add a red dotted line on the plot signifying when the Thomas Fire occurred.\n\n::: {#943cab3c .cell tags='[]' execution_count=5}\n``` {.python .cell-code}\n# Create line plot for AQI levels over time for Santa Barbara (2017-2018)\nplot = (aqi_sb.plot(kind='line', y='five_day_average', label = \"5-Day average\"))\n\n# Set title, xlabel, and ylabel for plot\nplot.set_title(\"Average AQI in Santa Barbara County (2017-2018)\", fontweight = 'bold')\nplot.set_xlabel(\"Date\")\nplot.set_ylabel(\"Average AQI (over 5-day window)\")\n\n# Add a vertical line on December 4, 2017 which was beginning of Thomas Fire\nplt.axvline(x=pd.to_datetime(\"2017-12-04\"), color='red', linestyle='--', label = \"Thomas Fire\")\nplt.legend()\n\n# Adjust the layout to prevent overlap\nplt.subplots_adjust(bottom=0.2)  # Increase bottom margin\n\n# Add figure description\nplt.figtext(0.5, 0, \"Figure 1: A line plot of 5-day rolling average of air quality index for Santa Barbara County from 2017-2018.\", wrap=True, horizontalalignment='center', fontsize=10)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nText(0.5, 0, 'Figure 1: A line plot of 5-day rolling average of air quality index for Santa Barbara County from 2017-2018.')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-2.png){width=651 height=467}\n:::\n:::\n\n\nThe plot above shows a 5-day rolling average of air quality index in Santa Barbara County from January 2017 to December 2018. We can clearly see a signficant spike in AQI right after the Thomas Fire started.\n\n## **Part 2** - Using landsat data to visualize Thomas Fire burn area by creating false color image\n\nIn this section, we'll create false color image of Santa Barbara county following the Thomas Fire to visualize the burn scar using landsat data. We'll plot shortwave infrared in the red channel, near infrared in the green channel, and red in the blue channel. This technique is used in remote sensing to visualize moisture content and vegetation of each pixel. This combination of spectral bands uncovers the burn scar due to wildfire, which we'll see in the Figure 2.\n\n### Load data\n\nWe'll first load the thomas fire perimeter we retrieved from CALFIRE's fire perimeter dataset. To see how we obtained the shapefile, check out the `thomas-fire-perimeter.ipynb` notebook in the notebooks folder of this github repository.\n\nThen we'll load the netCDF file containing landsat data using `rioxarray`.\n\n::: {#c4c81efc .cell tags='[]' execution_count=6}\n``` {.python .cell-code}\n# Load California Fire Perimeter shapefile\nthomas_fire = gpd.read_file(\"data/thomas_fire.shp\")\n\n# Load landsat data\nlandsat = rioxr.open_rasterio(\"data/landsat8-2018-01-26-sb-simplified.nc\")\n```\n:::\n\n\nSince the landsat data has 3 dimensions and 1 of the dimensions is redudant, we'll want want to drop the redudant dimension. We can do this by squeezing the data into 2 dimensions, then dropping the 'band' variable. The purpose of this step is to make the landsat data easier to work with and plot.\n\n::: {#972f0588 .cell execution_count=7}\n``` {.python .cell-code}\n# Convert data to 2 dimensions then drop the band variable\nlandsat = landsat.squeeze().drop_vars('band')\n```\n:::\n\n\n#### **Important** :\n\nWhen working with 2 spatial datasets, we always need to ensure the coordinate reference systems (CRS) of our spatial data match. Let's check if the CRS of the landsat and thomas fire perimeter match.\n\n::: {#060fd261 .cell execution_count=8}\n``` {.python .cell-code}\n# Print out CRS of landsat and thomas_fire CRSs\nprint(f\"**Landsat CRS** = {landsat.rio.crs}\")\nprint('----')\nprint(f\"**Thomas Fire CRS** = {thomas_fire.crs}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n**Landsat CRS** = EPSG:32611\n----\n**Thomas Fire CRS** = EPSG:3857\n```\n:::\n:::\n\n\nTurns out, they do not match. This is important to address right away!\n\n::: {#18de2913 .cell execution_count=9}\n``` {.python .cell-code}\n# Convert thomas_fire CRS to match landsat CRS\nthomas_fire = thomas_fire.to_crs(landsat.rio.crs)\n```\n:::\n\n\nOkay good.. now they match. For good measure, it's good practice to incorporate a test in our code that notifies us if there's an issue with our data. Here, we'll construct an assert statement that ensures the CRS of our 2 spatial datasets match.\n\n::: {#0cb2ad6d .cell execution_count=10}\n``` {.python .cell-code}\n# Verify that landsat CRS is the same as thomas_fire crs before moving onto next code\nassert landsat.rio.crs == thomas_fire.crs\n```\n:::\n\n\nNext, we'll want to explore the height and width of the landsat data.\n\n::: {#4096ffc8 .cell execution_count=11}\n``` {.python .cell-code}\n# Print the height and width of the landsat data \nprint('Height: ', landsat.rio.height)\nprint('Width: ', landsat.rio.width)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHeight:  731\nWidth:  870\n```\n:::\n:::\n\n\nUsing this height and width, we'll create the aspect ratio. This step will be important later on when we want to plot. The aspect ratio will help avoid any distortion in the data when plotting.\n\n::: {#fd6dc75a .cell execution_count=12}\n``` {.python .cell-code}\n# Calculate aspect ratio for plotting landsat data\nlandsat_aspect_ratio = landsat.rio.width / landsat.rio.height\n```\n:::\n\n\n### Plotting\n\nFinally, it's time to plot our landsat data! As mentioned previously, we'll plot the false color image by plotting a combination of shortwave infrared, near infrared, and red bands in order to uncover moisture content and vegetation of each pixel. This combination uncovers the Thomas Fire burn scar that you cannot see when you plot the true color image (red, green, and blue bands). For a clearer data visualization, we'll overlay the border of the Thomas Fire polygon on top of the landsat data. We'll color it in yellow to distinguish it from the rest of the plot.\n\n::: {#4662bf08 .cell tags='[]' execution_count=13}\n``` {.python .cell-code}\n# Initialize a new plot with correct aspect ratio\nfig, ax = plt.subplots(figsize = (8, 6*landsat_aspect_ratio))\n\n# Remove axes\nax.axis('off')\n\n# Overlay thomas_fire polygon\nthomas_fire.plot(ax = ax,\n                 color = 'none',\n                edgecolor = 'yellow', \n                linewidth = 1)\n\n# Plot shortwave infrared, near infrared, and red bands of landsat data to RGB channels respectively\nlandsat[['swir22', 'nir08', 'red']].to_array().plot.imshow(ax = ax, \n                                                           robust = True)\n# Add title\nax.set_title('False Color Image of Santa Barbara County During 2017 Thomas Fire', fontweight = 'bold')\n\n# Create scalebar\nscalebar = ScaleBar(1,  # Scale in units per pixel\n                    units='m',  # Set units to meters\n                    location='lower right', \n                    scale_loc='bottom')  \n\n# Add scalebar created above to plot\nax.add_artist(scalebar)\n\n# Create legend for Thomas Fire Boundary\nax.legend(handles = [mpatches.Patch(color='yellow',\n                          label='Thomas Fire Boundary')], \n          loc = \"lower left\",\n          labelcolor = \"white\", \n          frameon=False)\n\n# Add a north arrow\nax.annotate('N', xy=(0.95, 0.95), xytext=(0.95, 0.9),\n            arrowprops=dict(facecolor='white', width=1, headwidth=8),\n            ha='center', va='center', fontsize=9, color='white',\n            xycoords='axes fraction')\n\n# Add figure description\nplt.figtext(0.5, 0, \"Figure 2: This is false color image of Santa Barbra County After 2017 Thomas Fire. Short-wave infrared, near-infrared, and red bands are assigned to the red, green and blue channels, respectively. This specific configuration of spectral bands displays moisture content levels and vegetation health of an area.\", wrap=True, horizontalalignment='center', fontsize=10)\n\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-14-output-1.png){width=721 height=661}\n:::\n:::\n\n\n## Part 3: Landcover statistics\n\n(still figuring this part out)\n\n# Conclusion\n\nThe 2017 Thomas Fire significantly impacted both humans and the environment. This geospatial analysis demonstrats the power of Python and open source data for investigating the environmental impacts of wildfire and highlighting key insights into the fire's aftermath. Through this analysis, we visualized the change in air quality in the surrounding area, identified the spatial extent of the burn scar using satellite imagery, and quantified the affected ecosystems using land cover data.\n\n### References\n\nMicrosoft Planetary Computer. (Access Date: November 2024). Landsat Collection 2, Level-2 \\[Dataset\\]. U.S. Geological Survey (USGS). https://planetarycomputer.microsoft.com/dataset/landsat-c2-l2\n\nRiebeek, H. (2014, March 4). Why is that forest red and that cloud blue? NASA Earth Observatory. https://earthobservatory.nasa.gov/features/FalseColor\n\nU.S. Environmental Protection Agency. Air quality index data. \\[Dataset\\]. https://aqs.epa.gov/aqsweb/airdata/download_files.html\n\nU.S. Geological Survey. (2021, November 12). Common Landsat band combinations \\[Image\\]. U.S. Department of the Interior. https://www.usgs.gov/media/images/common-landsat-band-combinations\n\nU.S. Geological Survey. (Access Date: November 2024). California fire perimeters (all) \\[Dataset\\]. Data.gov. https://catalog.data.gov/dataset/california-fire-perimeters-all-b3436\n\n\"Thomas Fire (December 4, 2017).\" California Department of Forestry and Fire Protection, https://www.fire.ca.gov/incidents/2017/12/4/thomas-fire/.\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}